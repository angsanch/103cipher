#!/usr/bin/python3
##
## EPITECH PROJECT, 2023
## 102architect
## File description:
## architect maths
##

import matrixes
import ascii_helper
import sys

def print_usage():
    print("USAGE\n    ./103cipher message key flag\n")
    print("DESCRIPTION")
    print("    message    a message, made of ASCII characters")
    print("    key        the encryption key, made of ASCII characters")
    print("    flag       0 for the message to be encrypted, "
          "1 to be decrypted")

def encrypt():
        message = ascii_helper.str_to_ascii(sys.argv[1])
        message = ascii_helper.trailing_zero(message,
            len(message) + 3 - (len(message) % 3))
        message_matrix = matrixes.Matrix(3, int(len(message) / 3), message)
        key = ascii_helper.str_to_ascii(sys.argv[2])
        key = ascii_helper.trailing_zero(key,
            len(key) + 3 - (len(key) % 3))
        key_matrix = matrixes.Matrix(int(len(key) / 3), 3, key)

        print("Key matrix:")
        print(key_matrix)
        print()
        print("Encrypted message:")
        print(str(message_matrix * key_matrix)\
            .replace("\n", "\t").replace("\t", " "))

def decrypt():
        message = [int(i) for i in sys.argv[1].split(" ")]
        message_matrix = matrixes.Matrix(3, int(len(message) / 3), message)
        key = ascii_helper.str_to_ascii(sys.argv[2])
        key = ascii_helper.trailing_zero(key,
            len(key) + 3 - (len(key) % 3))
        key_matrix = matrixes.Matrix(int(len(key) / 3), 3, key).inverse()

        print("Key matrix:")
        print(key_matrix)
        print()
        print("Decrypted message:")
        print(ascii_helper.ascii_to_str((message_matrix * key_matrix)\
            .to_list()))

def codec():
    if sys.argv[3] == "0":
        encrypt()
    elif sys.argv[3] == "1":
        decrypt()

def main():
    if len(sys.argv) != 2 and len(sys.argv) != 4:
        raise Exception("Invalid amount of arguments")
    if len(sys.argv) == 2 and sys.argv[1] == "-h":
        print_usage()
    elif sys.argv[3] == "0" or sys.argv[3] == "1":
        codec()
    else:
        raise Exception("Invalid arguments")

if __name__ == "__main__":
    main()
    try:
        pass
    except Exception as e:
        print(e, file=sys.stderr)
        exit(84)
